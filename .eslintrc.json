{
    "env": {
        "browser": true,
        "es6": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:sonarjs/recommended",
        "plugin:vue/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
    ],
    "parser": "vue-eslint-parser",
    "parserOptions": {
        "parser": "@typescript-eslint/parser",
        "project": "./tsconfig.json",
        "createDefaultProgram": true
    },
    "plugins": ["vue", "optimize-regex", "sonarjs", "@typescript-eslint"],
    "rules": {
        "no-console": "warn",
        "no-tabs": ["error"],
        "semi": "off",
        "comma-dangle": ["error", "only-multiline"],
        "space-before-function-paren": [
            "error",
            {
                "anonymous": "always",
                "named": "never",
                "asyncArrow": "always"
            }
        ], // enforce consistent spacing before function definition opening parenthesis

        "optimize-regex/optimize-regex": "warn",

        "@typescript-eslint/semi": ["error", "always"],
        "@typescript-eslint/no-magic-numbers": [
            "off",
            {
                "ignoreNumericLiteralTypes": true,
                "ignoreEnums": true,
                "enforceConst": true,
                "ignoreReadonlyClassProperties": true,
                "ignore": [0, 24, 60, 1000]
            }
        ], // Disallows magic numbers
        "@typescript-eslint/brace-style": ["error", "1tbs"], // Enforce consistent brace style for blocks
        "@typescript-eslint/indent": ["error", 2], // Enforce consistent indentation
        "@typescript-eslint/quotes": ["error", "single", { "avoidEscape": true }], // Enforce the consistent use of either backticks, double, or single quotes
        "@typescript-eslint/func-call-spacing": ["error", "never"], // Require or disallow spacing between function identifiers and their invocations
        "@typescript-eslint/no-useless-constructor": "error", // Disallow unnecessary constructors
        "@typescript-eslint/prefer-for-of": "warn", // Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated
        "@typescript-eslint/no-parameter-properties": "error", // Disallow the use of parameter properties in class constructors
        "@typescript-eslint/no-unnecessary-type-arguments": "warn", // Warns if an explicitly specified type argument is the default for that type parameter
        "@typescript-eslint/prefer-function-type": "warn", // Use function types instead of interfaces with call signatures
        "@typescript-eslint/prefer-readonly": "warn", // Requires that private members are marked as readonly if they're never modified outside of the constructor
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/camelcase": ["error", { "properties": "never" }],
        "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_$" }],
        "@typescript-eslint/no-this-alias": "off"
    }
}
